#!/usr/bin/env python3
import itertools
import os
import sys
from datetime import datetime

import click
from werkzeug.utils import secure_filename

from KerbalStuff.config import site_logger, _cfg
from KerbalStuff.database import create_database, create_tables, drop_database, db, engine


def _get_alembic_config():
    if os.path.isfile('alembic.ini'):
        from alembic.config import Config
        return Config('alembic.ini')
    site_logger.error('Unable to locate alembic.ini')
    return None


@click.group()
def cli():
    """Admin utilities for Spacedock"""


@cli.group('database')
def cli_db():
    """Handle service database"""


@cli_db.command('wait')
def wait_database():
    from sqlalchemy import create_engine
    from sqlalchemy.engine.url import URL
    site_logger.info('Waiting for database to come online...')
    u = engine.url
    pg_engine = create_engine(URL(u.drivername, u.username, u.password, 
                                  u.host, u.port))
    while True:
        try:
            connection = pg_engine.connect()
            site_logger.info('Successfully connected to the database')
            connection.close()
            return
        except Exception as exc:
            from time import sleep
            site_logger.info('Unable to connect to DB: %s', str(exc))
            sleep(1)


@cli_db.command('initialize')
@click.option('--force', is_flag=True,
              help='Create tables and stamp alembic version '
                   'even if the database had already existed')
def initialize_database(force):
    """Create the database, create tables and stamp alembic version"""
    site_logger.info('Creating database...')
    created = create_database()
    if created:
        site_logger.info('Database created')
    if created or force:
        site_logger.info('Creating tables...')
        create_tables()
        site_logger.info('Stamping alembic version...')
        cfg = _get_alembic_config()
        if cfg is not None:
            from alembic import command
            command.stamp(cfg, "head")
            site_logger.info('Alembic version stamped as "head"')
    site_logger.info('Done')


@cli_db.command('migrate')
def migrate_database():
    """Migrate the database if needed"""
    cfg = _get_alembic_config()
    if cfg is not None:
        from alembic import command
        site_logger.info('Migrating database...')
        command.upgrade(cfg, 'head')
        site_logger.info('Done')
        sys.exit(0)
    sys.exit(1)


@cli_db.command('populate')
def populate_database():
    from KerbalStuff.objects import User, Publisher, Game, GameVersion
    # Create admin user if doesn't exist
    if not User.query.filter(User.username.ilike("admin")).first():
        admin = User(username="admin",
                     email="admin@example.com",
                     admin=True,
                     public=True)
        admin.set_password("development")
        db.add(admin)
        db.commit()
        site_logger.info('Created admin user')
    # Create normal user if doesn't exist
    if not User.query.filter(User.username.ilike("user")).first():
        user = User(username="user",
                    email="user@example.com",
                    public=True)
        user.set_password("development")
        db.add(user)
        db.commit()
        site_logger.info('Created normal user')
    if not Publisher.query.first():
        pub = Publisher(name='Squad')
        db.add(pub)
        db.commit()
        site_logger.info('Created Squad publisher')
    if not Game.query.first():
        game = Game(name='Kerbal Space Program',
                    publisher_id=1,
                    short='kerbal-space-program')
        game.active = True
        db.add(game)
        db.commit()
        site_logger.info('Created KSP game')
    if not GameVersion.query.first():
        game_version = GameVersion(friendly_version='1.0',
                                   game_id=1)
        db.add(game_version)
        db.commit()
        site_logger.info('Created KSP version 1.0')


@cli_db.command('seed')
def seed_database():
    # As of now this has to be run right after populate_database, without having touched the db in any way.
    # ./spacedock database drop && ./spacedock database initialize && ./spacedock database populate && ./spacedock database seed
    from KerbalStuff.objects import User, Publisher, Game, GameVersion, Mod, ModVersion, DownloadEvent

    # Create a publisher
    publisher_name = 'Seeding Publisher'
    if not Publisher.query.filter(Publisher.name == publisher_name).count():
        publisher = Publisher(name=publisher_name)
        db.add(publisher)
        db.commit()
    publisher_id = Publisher.query.filter(Publisher.name == publisher_name).one().id

    site_logger.info(f'Created {publisher_name}')

    # Create a game
    game_name = 'Seeding Game'
    if not Game.query.filter(Game.name == game_name).count():
        game = Game(name=game_name,
                    publisher_id=publisher_id,
                    short='seeding-game',
                    active=True)
        db.add(game)
        db.commit()
    game_id = Game.query.filter(Game.name == game_name).one().id

    site_logger.info(f'Created {game_name}')

    # Create a game version
    gameversion_name = 'seeding-1.0'
    if not GameVersion.query\
            .filter(GameVersion.game_id == game_id, GameVersion.friendly_version == gameversion_name).count():
        gameversion = GameVersion(friendly_version=gameversion_name,
                                  game_id=game_id)
        db.add(gameversion)
        db.commit()
    gameversion_id = GameVersion.query\
        .filter(GameVersion.game_id == game_id, GameVersion.friendly_version == gameversion_name).one().id

    site_logger.info(f'Created {game_name} version {gameversion_name}')
    user_count = 50000
    if User.query.count() < user_count:
        # Create users
        # TODO users = (User(...) for i in range(user_count))
        site_logger.info(f'Creating users...')
        users = list()
        for i in range(1, user_count+1):
            user_name = f'Seeding User {i}'
            user = User(username=user_name,
                        email=f'{user_name}@example.com',
                        password='UNHASHED-PASSWORD',
                        public=True)

            users.append(user)
            if i % (user_count/10) == 0:
                site_logger.info(f'Created {i} users, {user_count - i} to go')

        db.bulk_save_objects(users)
        db.commit()

        # Create mods
        site_logger.info(f'Creating mods...')
        mods = list()
        mod_count = 10000
        for i in range(1, mod_count+1):
            mod_name = f'Seeding Mod {i}'
            mod = Mod(user_id=i+2,
                      name=mod_name,
                      short_description='Short description',
                      description='Long description',
                      license='MIT',
                      ckan=False,
                      published=True,
                      game_id=game_id)
            mods.append(mod)
            if i % (mod_count/10) == 0:
                site_logger.info(f'Created {i} mods, {mod_count - i} to go')

        db.bulk_save_objects(mods)
        db.commit()
        mods = Mod.query.filter(Mod.game_id == game_id).all()

        # Create 10 mod versions per mod -> 100 000
        site_logger.info(f'Creating mod versions...')
        mod_version_count = 10
        for i in range(1, mod_count+1):
            mod_versions = list()
            for k in range(1, mod_version_count+1):
                mod_version_name = mods[i-1].name + f' Version {k}'
                mod_version = ModVersion(friendly_version=mod_version_name,
                                         gameversion_id=gameversion_id,
                                         download_path='./seed.zip',
                                         sort_index=k,
                                         mod_id=i)
                mod_versions.append(mod_version)

            db.bulk_save_objects(mod_versions)
            mods[i-1].default_version_id = (i-1)*mod_version_count + 1
            if i % (mod_count/10) == 0:
                site_logger.info(f'Created versions for {i} mods, {mod_count - i} to go')

        db.commit()

        # Create 500 download events per mod version -> 50 000 000
        site_logger.info(f'Creating download events...')
        download_event_count = 100

        # for i in range(1, mod_count+1):
            # for k in range(1, mod_version_count+1):
                # de = DownloadEvent(mod_id=i,
                #                    version_id=i*k,
                #                    downloads=1000,
                #                    created=date)
                # download_events = [de] * download_event_count
                # db.bulk_save_objects(download_events)
                # x = (i-1) * mod_version_count + k
        listoflists = [
            [
                itertools.repeat(
                    {"mod_id": i, "version_id": (i - 1) * mod_version_count + k, "downloads": 1000},
                    download_event_count
                )
                for k in range(1, mod_version_count+1)
            ]
            for i in range(1, mod_count+1)
        ]

        flat = itertools.chain.from_iterable(itertools.chain.from_iterable(listoflists))
        engine.execute(
            DownloadEvent.__table__.insert(),
            list(flat)
        )

        #    if i % (mod_count / 10) == 0:
                # db.commit()
        #        site_logger.info(f'Created {i*mod_version_count*download_event_count} download events for {i} mods')

    db.commit()
    site_logger.info('Database seeding finished')


cli_db.command('drop')(drop_database)


@cli.group('migrate')
def cli_migrate():
    """Various data migrations"""


def _download_bg(url, path):
    import subprocess
    sys.stdout.write("\rDownloading {0}...".format(path))
    subprocess.call(['wget', '--output-document=' + path, url])
    sys.stdout.write("\n")


def _migrate_bg(old_path, base_path, filename):
    full_path = os.path.join(_cfg('storage'), base_path)
    if not os.path.exists(full_path):
        os.makedirs(full_path)
    path = os.path.join(full_path, filename)
    _download_bg('https://vox.mediacru.sh/' + old_path, path)
    return os.path.join(base_path, filename)


@cli_migrate.command('backgrounds')
def migrate_backgrounds():
    from KerbalStuff.objects import Mod
    total = Mod.query.count()
    for index, mod in enumerate(Mod.query):
        if mod.background:
            print("Handling {} ({} of {})".format(mod.name, index + 1, total))
            filetype = os.path.splitext(os.path.basename(mod.background))[1]
            filename = secure_filename(mod.name) + filetype
            base_path = os.path.join(secure_filename(mod.user.username) + '_' + str(mod.user.id),
                                     secure_filename(mod.name))
            mod.background = _migrate_bg(mod.background, base_path, filename)
            db.commit()


@cli_migrate.command('profiles')
def migrate_profiles():
    from KerbalStuff.objects import User
    total = User.query.count()
    for index, user in enumerate(User.query):
        if user.backgroundMedia:
            print("Handling {} ({} of {})".format(user.username, index + 1, total))
            filetype = os.path.splitext(os.path.basename(user.backgroundMedia))[1]
            filename = secure_filename(user.username) + filetype
            base_path = os.path.join(secure_filename(user.username) + '_' + str(user.id))
            user.backgroundMedia = _migrate_bg(user.backgroundMedia, base_path, filename)
            db.commit()


@cli.group('admin')
def cli_admin():
    """Administrative tasks"""


@cli_admin.command('delete_user')
@click.argument('username', required=True, type=str)
def delete_user(username):
    from KerbalStuff.objects import User
    user = User.query.filter(User.username == username).first()
    if not user:
        site_logger.error('User not found')
        sys.exit(1)
    db.delete(user)
    db.commit()
    site_logger.error('User %s was deleted', username)


@cli_admin.command('order_versions')
def order_versions():
    from KerbalStuff.objects import Mod
    for m in Mod.query:
        if not m.versions:
            continue
        versions = sorted(m.versions, key=lambda v: v.created)
        m.default_version_id = versions[-1].id
        site_logger.info("Set version %s as the default for %s",
                         versions[-1].friendly_version, m.name)
        for i, v in enumerate(versions):
            site_logger.info("Setting sort order %s on %s %s", i, m.name, v.friendly_version)
            v.sort_index = i
        db.commit()


if __name__ == '__main__':
    cli()
